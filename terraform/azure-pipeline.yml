name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)-ACR
 
trigger: none
 
pr: none
 
parameters:

  - name: Action
    displayName: Action
    type: string
    default: 'Apply'
    values:
    - Plan
    - Apply
    - Destroy
 
variables:
  - name: backendServiceArm #manual creation before triggering pipeline
    value: 'demoazureservicecon'
  - name: backendAzureRmResourceGroupName #manual creation before triggering pipeline
    value: 'servuceconrg'
  - name: backendAzureRmStorageAccountName #manual creation before triggering pipeline
    value: 'servicecontfstate'
  - name: backendAzureRmContainerName #manual creation before triggering pipeline
    value: 'exampletfstate'
  - name: backendAzureRmKey
    value: 'terraform.tfstate'
  - name: environment
    value: 'production'
  - name: terraform_version
    value: '1.0.10'
  - name: repository
    value: 'aci'
  - name: action
    value: ${{ parameters.Action }}
 
stages :  
  - stage: terraform_base
    condition: ne('${{ variables.Action }}', 'Destroy')
    jobs:
      - job: terraform_apply
        steps:
          - task: TerraformInstaller@0
            displayName: 'install'
            inputs:
              terraformVersion: '${{ variables.terraform_version }}'
          - task: TerraformTaskV2@2
            displayName: 'init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: '${{ variables.backendServiceArm }}'
              backendAzureRmResourceGroupName: '${{ variables.backendAzureRmResourceGroupName }}'
              backendAzureRmStorageAccountName: '${{ variables.backendAzureRmStorageAccountName }}'
              backendAzureRmContainerName: '${{ variables.backendAzureRmContainerName }}'
              backendAzureRmKey: '${{ variables.backendAzureRmKey }}' 
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
          - task: TerraformTaskV2@2
            displayName: 'plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-var build_id=$(Build.BuildId) -input=false -var-file="../tfvars/${{ variables.environment }}/${{ variables.environment }}.tfvars"'
              environmentServiceNameAzureRM: '${{ variables.backendServiceArm }}'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          - task: TerraformTaskV2@2
            displayName: 'apply'
            condition: and(succeeded(), eq(variables['Action'], 'Apply'))
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: '-var build_id=$(Build.BuildId) -input=false -auto-approve -var-file="../tfvars/${{ variables.environment }}/${{ variables.environment }}.tfvars"'
              environmentServiceNameAzureRM: '${{ variables.backendServiceArm }}'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'