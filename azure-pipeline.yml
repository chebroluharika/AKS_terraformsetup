name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)
 
trigger: none
 
pr: none
 
parameters:
 
  - name: Action
    displayName: Action
    type: string
    default: 'Plan'
    values:
    - Plan
    - Apply
    - Destroy
 
variables:
  - name: backendServiceArm #manual creation before triggering pipeline
    value: 'demoazureservicecon'
  - name: backendAzureRmResourceGroupName #manual creation before triggering pipeline
    value: 'servuceconrg'
  - name: backendAzureRmStorageAccountName #manual creation before triggering pipeline
    value: 'servicecontfstate'
  - name: backendAzureRmContainerName #manual creation before triggering pipeline
    value: 'exampletfstate'
  - name: backendAzureRmKey
    value: 'terraform.tfstate'
  - name: backendAzureRmKeyAci
    value: 'terraform-aci.tfstate'
  - name: environment
    value: 'production'
  - name: terraform_version
    value: '1.0.10'
  - name: action
    value: ${{ parameters.Action }}
  - name: repository
    value: 'aci'
  - name: dockerfile
    value: '$(Build.SourcesDirectory)/aspnet-core-dotnet-core/Dockerfile'
  - name: containerRegistry
    value: 'sindhuaciacr'
 
stages :  
  - stage: terraform__aci
    dependsOn: [Build]
    condition: ne('${{ parameters.Action }}', 'Destroy')
    jobs:
      - template: '$(Build.SourcesDirectory)/templates/terraform-apply.yaml'
        parameters:
          backendServiceArm: '${{ variables.backendServiceArm }}'
          backendAzureRmResourceGroupName: '${{ variables.backendAzureRmResourceGroupName }}'
          backendAzureRmStorageAccountName: '${{ variables.backendAzureRmStorageAccountName }}'
          backendAzureRmContainerName: '${{ variables.backendAzureRmContainerName }}'
          backendAzureRmKey: '${{ variables.backendAzureRmKeyAci }}'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-aci/'
          environment: ${{ variables.environment }}
          terraform_version: ${{ variables.terraform_version }}
 
  - stage: terraform_aci_destroy
    condition: contains('${{ parameters.Action }}', 'Destroy')
    jobs:
      - template: '$(Build.SourcesDirectory)/templates/destroy.yaml'
        parameters:
          backendServiceArm: '${{ variables.backendServiceArm }}'
          backendAzureRmResourceGroupName: '${{ variables.backendAzureRmResourceGroupName }}'
          backendAzureRmStorageAccountName: '${{ variables.backendAzureRmStorageAccountName }}'
          backendAzureRmContainerName: '${{ variables.backendAzureRmContainerName }}'
          backendAzureRmKey: '${{ variables.backendAzureRmKeyAci }}'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-aci/'
          environment: ${{ variables.environment }}
          terraform_version: ${{ variables.terraform_version }}
          job_name: 'terraform_destroy_aci'
 
      - template: '$(Build.SourcesDirectory)/templates/destroy.yaml'
        parameters:
          backendServiceArm: '${{ variables.backendServiceArm }}'
          backendAzureRmResourceGroupName: '${{ variables.backendAzureRmResourceGroupName }}'
          backendAzureRmStorageAccountName: '${{ variables.backendAzureRmStorageAccountName }}'
          backendAzureRmContainerName: '${{ variables.backendAzureRmContainerName }}'
          backendAzureRmKey: '${{ variables.backendAzureRmKey }}'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
          environment: ${{ variables.environment }}
          terraform_version: ${{ variables.terraform_version }}
          job_name: 'terraform_destroy_base'
