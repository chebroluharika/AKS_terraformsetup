name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger: none

pool:
  vmImage: 'ubuntu-latest'

parameters:

  - name: Action
    displayName: Action
    type: string
    default: 'Plan'
    values:
    - Plan
    - Apply
    - Destroy

# Define Variables for Environments
variables:
  - name: backendServiceArm
    value: 'demoazureservicecon'
  - name: backendAzureRmResourceGroupName
    value: 'demo-rg'
  - name: backendAzureRmStorageAccountName
    value: 'demostorageaccount'
  - name: backendAzureRmContainerName
    value: 'exampletfstate'
  - name: backendAzureRmKey
    value: 'terraform.tfstate'
  - name: terraform_version
    value: '1.0.10'
  - name: action
    value: ${{ parameters.Action }}

stages :   
  - stage: terraform_plan_apply
    condition: ne('${{ parameters.Action }}', 'Destroy')
    jobs:
    - job: TerraformInstall
      continueOnError: false
      steps:
      - task: TerraformInstaller@0
        displayName: Terraform Install
        inputs:
          terraformVersion: 'latest'
      - task: TerraformCLI@0
        displayName: Terraform Init
        inputs:
          command: 'init'
          backendServiceArm: '${{ variables.backendServiceArm }}'
          backendAzureRmResourceGroupName: '${{ variables.backendAzureRmResourceGroupName }}'
          backendAzureRmStorageAccountName: '${{ variables.backendAzureRmStorageAccountName }}'
          backendAzureRmContainerName: '${{ variables.backendAzureRmContainerName }}'
          backendAzureRmKey: '${{ variables.backendAzureRmKey }}' 
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
          allowTelemetryCollection: false
      - task: TerraformCLI@0
        displayName: Terraform Validate
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          allowTelemetryCollection: false

- stage: DeployClusters
  jobs:
    - deployment: DeployDevCluster
      displayName: DeployDevCluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: $(DEV_ENVIRONMENT)      
      strategy:
        runOnce:
          deploy:
            steps:            
            - task: TerraformInstaller@0
              displayName: Terraform Install
              inputs:
                terraformVersion: 'latest'

            - task: TerraformCLI@0
              displayName: Terraform Init
              inputs:
                command: 'init'
                backendServiceArm: '${{ variables.backendServiceArm }}'
                backendAzureRmResourceGroupName: '${{ variables.backendAzureRmResourceGroupName }}'
                backendAzureRmStorageAccountName: '${{ variables.backendAzureRmStorageAccountName }}'
                backendAzureRmContainerName: '${{ variables.backendAzureRmContainerName }}'
                backendAzureRmKey: '${{ variables.backendAzureRmKey }}' 
                workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
                allowTelemetryCollection: false
            - task: TerraformCLI@0
              displayName: Terraform Plan
              inputs:
                command: 'plan'
                workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
                environmentServiceName: '${{ variables.backendServiceArm }}'
                allowTelemetryCollection: false
            - task: TerraformCLI@0
              displayName: Terraform Apply
              inputs:
                command: 'apply'
                workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
                environmentServiceName: '${{ variables.backendServiceArm }}'
                allowTelemetryCollection: false